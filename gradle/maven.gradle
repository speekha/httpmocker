/*
 * Copyright 2019-2021 David Blanc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'maven-publish'
//apply plugin: 'signing'

def pubComponent = (PLATFORM == "kmm") ? components.kotlin : components.java
def sourcesArtifact = (PLATFORM == "kmm") ? jvmSourcesJar : sourcesJar

artifacts {
    archives sourcesArtifact, dokkaJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "speekha"
            name "David Blanc"
            email "david.e.blanc@gmail.com"
        }
    }

    scm {
        url "https://github.com/speekha/httpmocker.git"
    }
}

def isSnapshotBuild() {
    return Boolean.valueOf(System.getProperty("snapshot"))
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    publishing {
        repositories {
            maven {
                def releasesRepoUrl = getReleaseRepositoryUrl()
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                url = isSnapshotBuild() ? snapshotsRepoUrl : releasesRepoUrl

                credentials(PasswordCredentials) {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }

        publications {
            mavenPublication(MavenPublication) {
                from pubComponent
                artifact sourcesArtifact
                artifact dokkaJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'A simple mocking lib for OkHttp')
                    root.appendNode('name', 'HTTP Mocker')
                    root.appendNode('url', 'https://github.com/speekha/httpmocker.git')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    if (JavaVersion.current().isJava9Compatible()) {
        tasks.withType(Javadoc) {
            options.addBooleanOption('html5', true)
        }
    }

//    signing {
//        publishing.publications.all { publication ->
//            sign publication
//        }
//    }
}