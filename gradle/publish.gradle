/*
 * Copyright 2019-2021 David Blanc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

def pubComponent = (PLATFORM == "kmm") ? components.kotlin : components.java
def sourcesArtifact = (PLATFORM == "kmm") ? jvmSourcesJar : sourcesJar

artifacts {
    archives sourcesArtifact, dokkaJar
}

ext {
    signingKeyId = ''
    signingPassword = ''
    signingSecretKeyRingFile = ''
    ossrhUsername = ''
    ossrhPassword = ''
    sonatypeStagingProfileId = ''
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getProperty('SIGNING_KEY_ID')
    ext["signing.password"] = System.getProperty('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = "../" + System.getProperty('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getProperty('NEXUS_USERNAME')
    ext["ossrhPassword"] = System.getProperty('NEXUS_PASSWORD')
//    ext["sonatypeStagingProfileId"] = System.getProperty('SONATYPE_STAGING_PROFILE_ID')
}

def isSnapshotBuild() {
    return Boolean.valueOf(System.getProperty("snapshot"))
}

afterEvaluate { project ->
    publishing {
        repositories {
            maven {
                name = "sonatype"
                def releasesRepoUrl = RELEASE_REPOSITORY_URL
                def snapshotsRepoUrl = SNAPSHOT_REPOSITORY_URL
                url = isSnapshotBuild() ? snapshotsRepoUrl : releasesRepoUrl

                credentials(PasswordCredentials) {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }

        def pomConfig = {
            name = POM_NAME
            description = POM_DESCRIPTION
            url = POM_URL
            inceptionYear = POM_INCEPTION_YEAR
            licenses {
                license {
                    name = POM_LICENCE_NAME
                    url = POM_LICENCE_URL
                    distribution = POM_LICENCE_DIST
                }
            }
            developers {
                developer {
                    id = POM_DEVELOPER_ID
                    name = POM_DEVELOPER_NAME
                    email = POM_DEVELOPER_EMAIL
                    url = POM_DEVELOPER_URL
                }
            }
            scm {
                url = POM_SCM_URL
                connection = POM_SCM_CONNECTION
                developerConnection = POM_SCM_DEV_CONNECTION
            }
        }

        publications {
            mavenPublication(MavenPublication) {
                from pubComponent
                artifact sourcesArtifact
            }
        }
        publications.all { publication ->
            // apply changes to pom.xml files, see pom.gradle
            pom pomConfig
            artifact dokkaJar
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    if (JavaVersion.current().isJava9Compatible()) {
        tasks.withType(Javadoc) {
            options.addBooleanOption('html5', true)
        }
    }

    signing {
        publishing.publications.all { publication ->
            sign publication
        }
    }
}